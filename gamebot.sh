#!/bin/bash

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if [[ $EUID -ne 0 ]]; then
   echo "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ root." 1>&2
   exit 1
fi

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
apt update
apt install -y python3 python3-venv python3-pip git

# –°–æ–∑–¥–∞–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–µ—ë
mkdir -p /opt/my_bot
cd /opt/my_bot

# –°–æ–∑–¥–∞–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ–≥–æ
python3 -m venv venv
source venv/bin/activate

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
pip install aiogram

# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º –±–æ—Ç–∞
cat << 'EOF' > bot.py
import asyncio
import json
import os
import logging
from datetime import datetime, timedelta
from collections import deque

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ContentType
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = 'bot_api'
BASE_BALANCE = 1000
JACKPOT = 2000
WIN = 1000
LOSS = 200
LIFE_BALANCE = 2000
LIFE_PRICE = 1500
FORWARDED_CASINO_PENALTY = 1000
JAIL_DURATION = timedelta(hours=1)
NEGATIVE_THRESHOLD_DURATION = timedelta(hours=2)
PLAY_COOLDOWN = timedelta(hours=1)
USERS_FILE = 'users.json'
MAX_CONSECUTIVE_MESSAGES = 3
ADMIN_IDS = [6273910889, 507583454, 6787450546, 684795841, 5055660788, 1408061454, 418190922, 1133387699, 5345361232, 6962389672, 1951350054, 8141866475 ]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {"users": {user_id (str): { ... –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ... }}}
users = {}

# –≠—Ñ–µ–º–µ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
user_messages = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
async def load_users():
    global users
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, 'r', encoding='utf-8') as f:
                users = json.load(f)
                if "users" not in users:
                    users["users"] = {}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            users = {"users": {}}
    else:
        users = {"users": {}}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
async def save_users():
    try:
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(users, f, ensure_ascii=False, indent=4)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
def get_user(user_id: int) -> dict:
    uid = str(user_id)
    if uid not in users["users"]:
        users["users"][uid] = {
            "balance": BASE_BALANCE,
            "last_play": None,
            "negative_since": None,
            "in_jail": False,
            "jail_until": None,
            "lives": 0,
            "first_name": "",
            "last_name": "",
            "username": ""
        }
    return users["users"][uid]

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
async def update_user(user_id: int, data: dict):
    users["users"][str(user_id)] = data
    await save_users()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏–ª–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ)
async def safe_delete_message(chat_id: int, message_id: int, delay: int = 40, immediate: bool = False):
    if immediate:
        try:
            await bot.delete_message(chat_id, message_id)
        except TelegramBadRequest:
            pass
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        await asyncio.sleep(delay)
        try:
            await bot.delete_message(chat_id, message_id)
        except TelegramBadRequest:
            pass
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç—é—Ä—å–º—ã
def check_jail_status(user: dict, now: datetime) -> str:
    if user.get("in_jail"):
        jail_until = user.get("jail_until")
        if jail_until:
            try:
                jail_until_dt = datetime.fromisoformat(jail_until)
                if now >= jail_until_dt:
                    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç—é—Ä—å–º—ã
                    user["in_jail"] = False
                    user["balance"] = BASE_BALANCE
                    user["negative_since"] = None
                    user["jail_until"] = None
                    return "–í—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã –∏–∑ —Ç—é—Ä—å–º—ã! –í–∞—à –±–∞–ª–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
                else:
                    return "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ç—é—Ä—å–º–µ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å."
            except (ValueError, TypeError):
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã jail_until: {jail_until}")
    return ""

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤
@dp.message(Command(commands=["top"]))
async def show_top_10(message: Message):
    data = users
    if "users" not in data or not data["users"]:
        reply = await message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        asyncio.create_task(safe_delete_message(message.chat.id, reply.message_id))
        return

    sorted_users = sorted(data["users"].values(), key=lambda x: x["balance"], reverse=True)
    top_10_text = "üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:\n"
    for idx, user in enumerate(sorted_users[:10], start=1):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è: –µ—Å–ª–∏ –µ—Å—Ç—å first_name –∏ last_name, —Ç–æ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö, –∏–Ω–∞—á–µ, –µ—Å–ª–∏ –µ—Å—Ç—å username, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        full_name = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip()
        if full_name:
            name = full_name
        elif user.get("username"):
            name = f"@{user['username']}"
        else:
            name = "–ê–Ω–æ–Ω–∏–º"
        top_10_text += f"{idx}. {name} ‚Äî {user['balance']} –±–∞–ª–ª–æ–≤\n"
    reply = await message.answer(top_10_text)
    asyncio.create_task(safe_delete_message(message.chat.id, reply.message_id))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞ (Dice) —Å —ç–º–æ–¥–∑–∏ üé∞
@dp.message(F.content_type == ContentType.DICE)
async def process_dice(message: Message):
    if message.dice.emoji != 'üé∞':
        return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É, –∞ –¥–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∞—Ñ
    if message.forward_date is not None:
        user = get_user(message.from_user.id)
        user["balance"] -= FORWARDED_CASINO_PENALTY
        await update_user(message.from_user.id, user)
        await message.answer(f"{message.from_user.full_name}, –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –∫–∞–∑–∏–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω—ã! –í–∞–º —Å–Ω—è—Ç–æ {FORWARDED_CASINO_PENALTY} –º–æ–Ω–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è.")
        asyncio.create_task(safe_delete_message(message.chat.id, message.message_id, immediate=True))
        return

    user = get_user(message.from_user.id)
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user["first_name"] = message.from_user.first_name
    user["last_name"] = message.from_user.last_name if message.from_user.last_name else ""
    user["username"] = message.from_user.username if message.from_user.username else ""

    now = datetime.now()
    jail_status = check_jail_status(user, now)
    if jail_status:
        await message.answer(jail_status)
        await safe_delete_message(message.chat.id, message.message_id, immediate=True)
        await update_user(message.from_user.id, user)
        return

    if user.get("last_play") and now - datetime.fromisoformat(user["last_play"]) < PLAY_COOLDOWN:
        await safe_delete_message(message.chat.id, message.message_id, immediate=True)
        return
    user["last_play"] = now.isoformat()

    dice_value = message.dice.value
    result_text = ""
    if dice_value == 64:
        user["balance"] += JACKPOT
        result_text = f"üí∞ {message.from_user.full_name} –î–∂–µ–∫–ø–æ—Ç! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {JACKPOT} –º–æ–Ω–µ—Ç!"
    elif dice_value in (1, 22, 43):
        user["balance"] += WIN
        result_text = f"üíµ {message.from_user.full_name} –í—ã–∏–≥—Ä—ã—à! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {WIN} –º–æ–Ω–µ—Ç."
    else:
        user["balance"] -= LOSS
        result_text = f"üòû {message.from_user.full_name} –ü—Ä–æ–∏–≥—Ä—ã—à. –° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–Ω—è—Ç–æ {LOSS} –º–æ–Ω–µ—Ç."
        asyncio.create_task(safe_delete_message(message.chat.id, message.message_id))
    
    if user["balance"] < 0:
        if not user.get("negative_since"):
            user["negative_since"] = now.isoformat()
        elif now - datetime.fromisoformat(user["negative_since"]) >= NEGATIVE_THRESHOLD_DURATION:
            if user.get("lives", 0) > 0:
                user["lives"] -= 1
                user["balance"] = LIFE_BALANCE
                user["negative_since"] = None
                result_text += "\n‚úÖ –ñ–∏–∑–Ω—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞, –±–∞–ª–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ç—é—Ä—å–º–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∞!"
            else:
                user["in_jail"] = True
                user["jail_until"] = (now + JAIL_DURATION).isoformat()
                result_text += "\nüö® –í—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ç—é—Ä—å–º—É –Ω–∞ 1 —á–∞—Å –∑–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å!"

    await update_user(message.from_user.id, user)
    result_msg = await message.answer(result_text)
    # –£–¥–∞–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ 40 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–º–≤–æ–ª—ã –≤—ã–∏–≥—Ä—ã—à–∞
    if "üí∞" not in result_text and "üíµ" not in result_text:
        asyncio.create_task(safe_delete_message(result_msg.chat.id, result_msg.message_id))

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
@dp.message(Command(commands=["balance"]))
async def cmd_balance(message: Message):
    user = get_user(message.from_user.id)
    balance_msg = f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['balance']} –±–∞–ª–ª–æ–≤."
    msg = await message.answer(balance_msg)
    asyncio.create_task(safe_delete_message(message.chat.id, message.message_id))
    asyncio.create_task(safe_delete_message(msg.chat.id, msg.message_id))

# –ö–æ–º–∞–Ω–¥–∞ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ (justice)
@dp.message(Command(commands=["justice"]))
async def justice_handler(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        reply = await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        asyncio.create_task(safe_delete_message(message.chat.id, reply.message_id))
        return

    if not message.reply_to_message:
        reply = await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        asyncio.create_task(safe_delete_message(message.chat.id, reply.message_id))
        return

    dice_message = await message.reply_dice(emoji="üé≤")
    dice_value = dice_message.dice.value
    target_user_name = message.reply_to_message.from_user.full_name
    if dice_value == 6:
        result_text = f"–†–µ—à–µ–Ω–∏–µ–º —Ä–∞–π–æ–Ω–Ω–æ–≥–æ —Å—É–¥–∞ –≥–æ—Ä–æ–¥–∞ –û–°–°–ö {target_user_name} –ø—Ä–∏–∑–Ω–∞–Ω –Ω–µ–≤–∏–Ω–æ–≤–Ω—ã–º"
    else:
        result_text = (f"–†–µ—à–µ–Ω–∏–µ–º —Ä–∞–π–æ–Ω–Ω–æ–≥–æ —Å—É–¥–∞ –≥–æ—Ä–æ–¥–∞ –û–°–°–ö {target_user_name} –ø—Ä–∏–∑–Ω–∞–Ω –≤–∏–Ω–æ–≤–Ω—ã–º –≤ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞. "
                       f"–ü—Ä–∏–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è –∫ –∑–∞–∫–ª—é—á–µ–Ω–∏—é –Ω–∞ —Å—Ä–æ–∫ {dice_value} {get_days_suffix(dice_value)}.")
    await message.reply(result_text)
    

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ª–æ–≤–∞ "–¥–µ–Ω—å"
def get_days_suffix(days):
    if 11 <= days % 100 <= 19:
        return "–¥–Ω–µ–π"
    last_digit = days % 10
    if last_digit == 1:
        return "–¥–µ–Ω—å"
    elif 2 <= last_digit <= 4:
        return "–¥–Ω—è"
    else:
        return "–¥–Ω–µ–π"

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∂–∏–∑–Ω–∏
@dp.message(Command(commands=["buy_life"]))
async def cmd_buy_life(message: Message):
    user = get_user(message.from_user.id)
    if user["balance"] < LIFE_PRICE:
        response = f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∂–∏–∑–Ω–∏. –°—Ç–æ–∏–º–æ—Å—Ç—å {LIFE_PRICE}"
    else:
        user["balance"] -= LIFE_PRICE
        user["lives"] = user.get("lives", 0) + 1
        response = "–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –∂–∏–∑–Ω—å!"
    await update_user(message.from_user.id, user)
    msg = await message.answer(response)
    asyncio.create_task(safe_delete_message(message.chat.id, message.message_id))
    asyncio.create_task(safe_delete_message(msg.chat.id, msg.message_id))


# –ù–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥—Ä—è–¥ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def track_and_check_user_messages(user_id: int, message_text: str) -> bool:
    if user_id not in user_messages:
        user_messages[user_id] = {"last": None, "count": 0}
    data = user_messages[user_id]
    if message_text == data["last"]:
        data["count"] += 1
    else:
        data["last"] = message_text
        data["count"] = 1
    return data["count"] >= 3

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç, —Å—Ç–∏–∫–µ—Ä—ã, –∞–Ω–∏–º–∞—Ü–∏–∏, –≤–∏–¥–µ–æ, —Ñ–æ—Ç–æ)
@dp.message(F.content_type.in_([ContentType.TEXT, ContentType.STICKER, ContentType.ANIMATION, ContentType.VIDEO, ContentType.PHOTO]))
async def handle_all_messages(message: Message):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã, –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
    if message.media_group_id:
        return
    content = message.text or message.caption or ''
    if track_and_check_user_messages(message.from_user.id, content):
        await safe_delete_message(message.chat.id, message.message_id, immediate=True)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@dp.message(lambda m: m.text and m.text.startswith('/'))
async def delete_command_messages(message: Message):
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ 40 —Å–µ–∫—É–Ω–¥
    await safe_delete_message(message.chat.id, message.message_id, delay=5)



# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await load_users()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
EOF

# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è systemd
cat << EOF > /etc/systemd/system/my_bot.service
[Unit]
Description=My Telegram Bot
After=network.target

[Service]
ExecStart=/opt/my_bot/venv/bin/python /opt/my_bot/bot.py
WorkingDirectory=/opt/my_bot
User=ubuntu
Group=ubuntu
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ systemd –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–ª—É–∂–±—É
systemctl daemon-reload
systemctl start my_bot.service
systemctl enable my_bot.service

echo "–ë–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–ª—É–∂–±—ã —Å –ø–æ–º–æ—â—å—é 'systemctl status my_bot.service'."
