#!/bin/bash

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if [[ $EUID -ne 0 ]]; then
   echo "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ root." 1>&2
   exit 1
fi

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
apt update
apt install -y python3 python3-venv python3-pip git

# –°–æ–∑–¥–∞–π—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–µ—ë
mkdir -p /opt/my_bot
cd /opt/my_bot

# –°–æ–∑–¥–∞–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ–≥–æ
python3 -m venv venv
source venv/bin/activate

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
pip install aiogram

# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–¥–æ–º –±–æ—Ç–∞
cat << 'EOF' > bot.py
import asyncio
import logging
import json
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.bot import DefaultBotProperties
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = "7295106138:AAGUaMjkPqCC-bjRyS_ENKRz0H93wHGY8ds"

# –ó–Ω–∞—á–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–µ–π –∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π
JACKPOT = 2000
WIN = 1000
LOOSE = -100
RESET_BALANCE = 1000

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
COOLDOWN_TIME = timedelta(minutes=30)
DELETE_TIME = 5
PRISON_TIME = timedelta(hours=2)
DATA_FILE = "user_data.json"

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
ADMIN_USERS = {6273910889: "Admin1", 987654321: "Admin2"}  # user_id: name

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
default_properties = DefaultBotProperties(parse_mode="HTML")
bot = Bot(token=API_TOKEN, session=AiohttpSession(), default=default_properties)
dp = Dispatcher()

# –•—ç–ª–ø–µ—Ä-—Ñ—É–Ω–∫—Ü–∏–∏
def load_data():
    try:
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}
    except json.JSONDecodeError:
        logging.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ JSON.")
        return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=4)

user_data = load_data()

def update_balance(user_id, amount, use_ticket=False):
    if not isinstance(user_id, int) or not isinstance(amount, (int, float)):
        logging.error("Invalid user_id or amount type")
        return

    if user_id not in user_data:
        user_data[user_id] = {"balance": RESET_BALANCE, "last_action": {"üé∞": None, "üéØ": None, "üé≤": None}, "prison_until": None, "tickets": 0}

    user_data[user_id]["balance"] += amount
    if user_data[user_id]["balance"] < 0:
        user_data[user_id]["prison_until"] = (datetime.now() + PRISON_TIME).isoformat()
        user_data[user_id]["balance"] = 0


def get_balance(user_id):
    return user_data.get(user_id, {}).get("balance", RESET_BALANCE)

def in_prison(user_id):
    prison_until = user_data.get(user_id, {}).get("prison_until")
    if not prison_until:
        return False
    if datetime.now() >= datetime.fromisoformat(prison_until):
        user_data[user_id]["prison_until"] = None
        return False
    return True

def can_send_sticker(user_id, emoji):
    if in_prison(user_id):
        return False

    last_action = user_data.get(user_id, {}).get("last_action", {}).get(emoji)
    if not last_action or datetime.now() - datetime.fromisoformat(last_action) > COOLDOWN_TIME:
        return True
    return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ —Ç—é—Ä—å–º—É
async def handle_prison(user_id, chat_id):
    prison_until = datetime.fromisoformat(user_data[user_id]["prison_until"])
    remaining_time = (prison_until - datetime.now()).seconds // 60
    await send_and_delete_message(chat_id, f"–í—ã –≤ —Ç—é—Ä—å–º–µ! –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å {remaining_time} –º–∏–Ω—É—Ç.")


async def send_and_delete_message(chat_id, text):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = await bot.send_message(chat_id, text)
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    asyncio.create_task(delete_message_later(chat_id, message.message_id))

async def delete_message_later(chat_id, message_id):
    # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    await asyncio.sleep(DELETE_TIME)
    await bot.delete_message(chat_id, message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
async def handle_dice(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    user = message.from_user
    emoji = message.dice.emoji

    if in_prison(user_id):
        prison_until = datetime.fromisoformat(user_data[user_id]["prison_until"])
        remaining_time = (prison_until - datetime.now()).seconds // 60
        await send_and_delete_message(chat_id, f"{user.full_name}, –≤—ã –≤ —Ç—é—Ä—å–º–µ! –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å {remaining_time} –º–∏–Ω—É—Ç.")
        await bot.delete_message(chat_id, message.message_id)
        return

    if not can_send_sticker(user_id, emoji):
        await bot.delete_message(chat_id, message.message_id)
        return

    if emoji == "üé∞":
        dice_value = message.dice.value

        if dice_value == 64:
            update_balance(user_id, JACKPOT)
            await bot.send_message(chat_id, f"{user.full_name}, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—Ä–∏ —Å–µ–º–µ—Ä–∫–∏! üéâ –î–∂–µ–∫–ø–æ—Ç! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {JACKPOT} –º–æ–Ω–µ—Ç.")
        elif dice_value in [1, 22, 43]:
            update_balance(user_id, WIN)
            await bot.send_message(chat_id, f"{user.full_name}, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {WIN} –º–æ–Ω–µ—Ç.")
        else:
            update_balance(user_id, LOOSE)
            await send_and_delete_message(chat_id, f"{user.full_name}, –†–µ–∑—É–ª—å—Ç–∞—Ç: {dice_value}. –ù–µ—É–¥–∞—á–∞! –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {abs(LOOSE)} –º–æ–Ω–µ—Ç.")

    elif emoji == "üéØ":
        dice_value = message.dice.value
        if dice_value == 6:
            update_balance(user_id, WIN)
            await bot.send_message(chat_id, f"{user.full_name}, —Ç–æ—á–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª! üéØ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {WIN} –º–æ–Ω–µ—Ç.")
        else:
            balance = get_balance(user_id)
            update_balance(user_id, -(balance // 2))
            await send_and_delete_message(chat_id, f"{user.full_name}, –ø—Ä–æ–º–∞—Ö! –í–∞—à –±–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–µ–Ω –≤–¥–≤–æ–µ.")

    elif emoji == "üé≤":
        dice_value = message.dice.value
        if dice_value in [1, 2, 3]:
            multiplier = {1: 4, 2: 3, 3: 2}[dice_value]
            balance = get_balance(user_id)
            update_balance(user_id, -(balance // multiplier))
            await send_and_delete_message(chat_id, f"{user.full_name}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {dice_value}. –í–∞—à –±–∞–ª–∞–Ω—Å —É–º–µ–Ω—å—à–µ–Ω –≤ {multiplier} —Ä–∞–∑–∞.")
        else:
            multiplier = {4: 2, 5: 3, 6: 4}[dice_value]
            update_balance(user_id, get_balance(user_id) * (multiplier - 1))
            await bot.send_message(chat_id, f"{user.full_name}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {dice_value}. –í–∞—à –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–µ–Ω –≤ {multiplier} —Ä–∞–∑–∞.")

    user_data[user_id]["last_action"][emoji] = datetime.now().isoformat()
    save_data(user_data)  # Save data after the action
    await delete_message_later(chat_id, message.message_id)

async def admin_dice_command(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    if user_id not in ADMIN_USERS:
        await send_and_delete_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await bot.delete_message(chat_id, message.message_id)
        return

    dice_message = await bot.send_dice(chat_id, emoji="üé≤")
    dice_value = dice_message.dice.value

    if dice_value == 6:
        await bot.send_message(chat_id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç üé≤: –≤–∏–Ω–æ–≤–µ–Ω.")
    else:
        await bot.send_message(chat_id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç üé≤: –Ω–µ–≤–∏–Ω–æ–≤–µ–Ω.")

async def check_balance(message: Message):
    user_id = message.from_user.id
    balance = get_balance(user_id)
    await send_and_delete_message(message.chat.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç.")
    await delete_message_later(message.chat.id, message.message_id)

async def show_top(message: Message):
    top_users = sorted(user_data.items(), key=lambda x: x[1]["balance"], reverse=True)[:10]
    leaderboard = "\n".join([f"{i+1}. {ADMIN_USERS.get(int(user_id), user_id)}: {data['balance']} –º–æ–Ω–µ—Ç" for i, (user_id, data) in enumerate(top_users)])
    await send_and_delete_message(message.chat.id, f"<b>–¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n{leaderboard}")
    await delete_message_later(message.chat.id, message.message_id)



async def handle_message(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    if message.text.startswith('/'):
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞
        if message.text.startswith('/balance'):
            await check_balance(message)
        elif message.text.startswith('/top'):
            await show_top(message)
        elif message.text.startswith('/justice'):
            await admin_dice_command(message)

        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        await delete_message_later(chat_id, message.message_id)
        return  

    if in_prison(user_id):
        await handle_prison(user_id, chat_id)
        return

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    user_data = load_data()

    dp.message.register(handle_dice, lambda message: message.dice and message.dice.emoji in ["üé∞", "üéØ", "üé≤"])
    dp.message.register(check_balance, Command(commands=["balance"]))
    dp.message.register(show_top, Command(commands=["top"]))
    dp.message.register(admin_dice_command, Command(commands=["justice"]))
    dp.message.register(handle_message)

    dp.run_polling(bot)
EOF

# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è systemd
cat << EOF > /etc/systemd/system/my_bot.service
[Unit]
Description=My Telegram Bot
After=network.target

[Service]
ExecStart=/opt/my_bot/venv/bin/python /opt/my_bot/bot.py
WorkingDirectory=/opt/my_bot
User=ubuntu
Group=ubuntu
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ systemd –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–ª—É–∂–±—É
systemctl daemon-reload
systemctl start my_bot.service
systemctl enable my_bot.service

echo "–ë–æ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–ª—É–∂–±—ã —Å –ø–æ–º–æ—â—å—é 'systemctl status my_bot.service'."
