#!/bin/bash

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_DIR="/opt/shadow_slave_bot"
VENV_DIR="$BOT_DIR/botenv"
SERVICE_FILE="/etc/systemd/system/shadow_slave_bot.service"
BOT_SCRIPT="$BOT_DIR/bot.py"

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
sudo apt update
sudo apt upgrade -y

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∏ pip
sudo apt install -y python3 python3-pip python3-venv

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±–æ—Ç–∞
sudo mkdir -p $BOT_DIR

# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±–æ—Ç–∞
cd $BOT_DIR

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
python3 -m venv botenv

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
source botenv/bin/activate
pip install aiogram beautifulsoup4 aiohttp

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
echo 'API_TOKEN = "7516735071:AAEvgxMXIEx06sSJ2Aq_YHR8AqYMGP7kL1k"' > config.py

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –±–æ—Ç–∞
cat << 'EOF' > $BOT_SCRIPT
import logging
import asyncio
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from bs4 import BeautifulSoup
import aiohttp
import re

API_TOKEN = '7516735071:AAEvgxMXIEx06sSJ2Aq_YHR8AqYMGP7kL1k'
URL_WEBNOVEL = 'https://webnovel.com/book/shadow-slave_22196546206090805/catalog'
URL_BOOSTY = 'https://boosty.to/shadow_slave'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –í –ø–∞–º—è—Ç–∏ —Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ –≥–ª–∞–≤—ã
last_chapters_webnovel = []
last_chapters_boosty = []
notified_chapters_webnovel = set()
notified_chapters_boosty = set()

# –•—Ä–∞–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç—ã
sent_messages = {}  # –ö–ª—é—á–∏: chat_id, –ó–Ω–∞—á–µ–Ω–∏—è: –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

# –•—Ä–∞–Ω–∏–º chat_id –≤ –∫–æ–¥–µ
chat_data = {
    'chats': ["-1002079142065",]
}

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

async def fetch_webnovel_chapter():
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(URL_WEBNOVEL, headers=headers) as response:
                if response.status == 200:
                    html = await response.text()
                    soup = BeautifulSoup(html, 'html.parser')
                    chapter_tag = soup.find('a', class_='ell lst-chapter dib vam')
                    return chapter_tag.text.strip() if chapter_tag else None
                else:
                    logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Webnovel: {response.status}')
                    return None
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Webnovel: {e}')
        return None

async def fetch_boosty_chapters():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(URL_BOOSTY) as response:
                if response.status == 200:
                    html = await response.text()
                    soup = BeautifulSoup(html, 'html.parser')
                    chapters = soup.find_all('div', class_='PostSubscriptionBlock_title_WXCN0')
                    filtered_chapters = [
                        chapter.get_text(strip=True)
                        for chapter in chapters
                        if re.match(r'^–ì–ª–∞–≤–∞ \d+: .+$', chapter.get_text(strip=True))
                    ]
                    return filtered_chapters
                else:
                    logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Boosty: {response.status}')
                    return []
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Boosty: {e}')
        return []

async def check_new_chapters():
    global last_chapters_webnovel, last_chapters_boosty, notified_chapters_webnovel, notified_chapters_boosty

    latest_chapter_webnovel = await fetch_webnovel_chapter()
    new_chapters_found = False

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤ Webnovel
    if latest_chapter_webnovel and (not last_chapters_webnovel or latest_chapter_webnovel != last_chapters_webnovel[-1]):
        last_chapters_webnovel.append(latest_chapter_webnovel)
        if len(last_chapters_webnovel) > 2:
            last_chapters_webnovel.pop(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≥–ª–∞–≤–∞ –Ω–æ–≤–∞—è
        if latest_chapter_webnovel not in notified_chapters_webnovel:
            await notify_chats(f"üìñ –í—ã—à–ª–∞ –Ω–æ–≤–∞—è –≥–ª–∞–≤–∞ –Ω–∞ Webnovel: {latest_chapter_webnovel}")
            notified_chapters_webnovel.add(latest_chapter_webnovel)
            new_chapters_found = True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤ Boosty
    boosty_chapters = await fetch_boosty_chapters()
    if boosty_chapters:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ –≥–ª–∞–≤—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        if boosty_chapters and (not last_chapters_boosty or boosty_chapters[0] != last_chapters_boosty[0]):
            last_chapters_boosty = boosty_chapters[:2]
            last_chapters_boosty.reverse()  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –≥–ª–∞–≤

        for chapter in last_chapters_boosty:
            if chapter not in notified_chapters_boosty:
                await notify_chats(f"üöÄ –í—ã—à–ª–∞ –Ω–æ–≤–∞—è –≥–ª–∞–≤–∞ –Ω–∞ Boosty: {chapter}")
                notified_chapters_boosty.add(chapter)
                new_chapters_found = True

    return new_chapters_found

async def check_updates():
    while True:
        try:
            logging.info("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≥–ª–∞–≤...")
            new_chapters_found = await check_new_chapters()
            if not new_chapters_found:
                logging.info("–ù–æ–≤—ã—Ö –≥–ª–∞–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        await asyncio.sleep(8)  # –û–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ 8 —Å–µ–∫—É–Ω–¥

async def notify_chats(message_text):
    for chat_id in chat_data.get('chats', []):
        chat_id_str = str(chat_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç
        if chat_id_str not in sent_messages:
            sent_messages[chat_id_str] = set()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç
        if message_text not in sent_messages[chat_id_str]:
            try:
                await bot.send_message(
                    chat_id, 
                    message_text, 
                    disable_web_page_preview=True  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
                )
                sent_messages[chat_id_str].add(message_text)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

async def on_startup():
    if chat_data.get('chats'):
        # Initialize `notified_chapters_boosty` from chat data if needed
        pass

    asyncio.create_task(check_updates())

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–æ–≤—ã—Ö –≥–ª–∞–≤–∞—Ö –Ω–∞ Webnovel –∏ Boosty.",
        disable_web_page_preview=True
    )

@dp.message(Command("last"))
async def last_chapter(message: types.Message):
    webnovel_chapters = "\n".join(last_chapters_webnovel)
    boosty_chapters = "\n".join(last_chapters_boosty)

    response = (
        f"<b>–ù–æ–≤—ã–µ –≥–ª–∞–≤—ã –Ω–∞ <a href='{URL_WEBNOVEL}'>Webnovel</a>:</b>\n{webnovel_chapters}\n\n"
        f"<b>–ù–æ–≤—ã–µ –≥–ª–∞–≤—ã –Ω–∞ <a href='{URL_BOOSTY}'>Boosty</a>:</b>\n{boosty_chapters}"
    )

    await message.answer(response, parse_mode='HTML', disable_web_page_preview=True)

@dp.message(Command("check"))
async def check_chapters(message: Message):
    new_chapters_found = await check_new_chapters()
    if not new_chapters_found:
        await last_chapter(message)
    else:
        await message.answer(
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–æ–≤—ã–µ –≥–ª–∞–≤—ã, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ—è–≤–∏–ª–∏—Å—å, –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.",
            disable_web_page_preview=True
        )

@dp.message(Command("ban"))
async def ban_command(message: Message):
    user_name = message.from_user.username
    if user_name == 'dupl1citous':
        response_text = "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç –∏ –±—ã–ª–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –ò–ò. ü§ñ"
    elif user_name == 'AtLasFP':
        response_text = "–ù–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –≥–ª–∞–≤—ã —Å–∞–º–∏ —Å–µ–±—è –Ω–µ –ø–µ—Ä–µ–≤–µ–¥—É—Ç. üìö"
    else:
        response_text = f"–ü–æ–Ω—è–ª–∞, –Ω–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –∏ –∑–∞–º–µ–Ω—É –∏–Ω–¥–∏–≤–∏–¥–∞ –Ω–∞ –ò–ò... ü§ñ"

    await message.reply(response_text, disable_web_page_preview=True)

@dp.message()
async def greet_new_member(message: types.Message):
    if message.chat.type in ['group', 'supergroup']:
        new_members = message.new_chat_members
        if new_members is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ new_members –Ω–µ None
            for member in new_members:
                webnovel_chapters = "\n".join(last_chapters_webnovel)
                boosty_chapters = "\n".join(last_chapters_boosty)

                welcome_text = (
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.full_name}. –ó–¥–µ—Å—å –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –æ–Ω–≥–æ–∏–Ω–≥ –¢–µ–Ω–µ–≤–æ–≥–æ –†–∞–±–∞. "
                    f"–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å —Å–ø–æ–π–ª–µ—Ä—ã –∏–ª–∏ —á–∏—Ç–∞–µ—Ç–µ –≥–ª–∞–≤—ã –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–µ, —Ç–æ –≤–∞–º <a href='https://t.me/shad0wslave_chat'>—Å—é–¥–∞</a>. "
                    f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ <a href='https://t.me/c/2079142065/95762'>–ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞</a> –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n\n"
                    f"<b>–ù–æ–≤—ã–µ –≥–ª–∞–≤—ã –Ω–∞ <a href='{URL_WEBNOVEL}'>Webnovel</a>:</b>\n{webnovel_chapters}\n\n"            
                )
                await message.reply(welcome_text, parse_mode='HTML', disable_web_page_preview=True)

            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            chat_id = str(message.chat.id)
            if chat_id not in chat_data.get('chats', []):
                chat_data['chats'].append(chat_id)
                logging.info(f'–ß–∞—Ç {chat_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–∞–º—è—Ç—å.')
        else:
            logging.warning("–ù–µ—Ç –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")

if __name__ == '__main__':
    dp.startup.register(on_startup)
    dp.run_polling(bot)
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
sudo bash -c "cat << EOF > $SERVICE_FILE
[Unit]
Description=Shadow Slave Bot
After=network.target

[Service]
User=$USER
WorkingDirectory=$BOT_DIR
ExecStart=$VENV_DIR/bin/python $BOT_SCRIPT
Restart=always

[Install]
WantedBy=multi-user.target
EOF"

# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ systemd –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
sudo systemctl daemon-reload
sudo systemctl start shadow_slave_bot
sudo systemctl enable shadow_slave_bot

echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å."
