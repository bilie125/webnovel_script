#!/bin/bash

# –û–±–Ω–æ–≤–ª—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
sudo apt update
sudo apt upgrade -y
sudo apt install -y python3 python3-pip

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ Python-–±–∏–±–ª–∏–æ—Ç–µ–∫–∏
pip3 install aiogram aiohttp beautifulsoup4

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–µ–µ
mkdir -p ~/my_telegram_bot
cd ~/my_telegram_bot

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –±–æ—Ç–∞
cat << 'EOF' > bot.py
import logging
import asyncio
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from bs4 import BeautifulSoup
import aiohttp
import re

API_TOKEN = '7516735071:AAEvgxMXIEx06sSJ2Aq_YHR8AqYMGP7kL1k'
URL_WEBNOVEL = 'https://webnovel.com/book/shadow-slave_22196546206090805/catalog'
URL_BOOSTY = 'https://boosty.to/shadow_slave'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –í –ø–∞–º—è—Ç–∏ —Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ –≥–ª–∞–≤—ã
last_chapters_webnovel = []
last_chapters_boosty = []
notified_chapters_webnovel = set()
notified_chapters_boosty = set()

# –•—Ä–∞–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç—ã
sent_messages = {}  # –ö–ª—é—á–∏: chat_id, –ó–Ω–∞—á–µ–Ω–∏—è: –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

async def fetch_webnovel_chapter():
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(URL_WEBNOVEL, headers=headers) as response:
                if response.status == 200:
                    html = await response.text()
                    soup = BeautifulSoup(html, 'html.parser')
                    chapter_tag = soup.find('a', class_='ell lst-chapter dib vam')
                    return chapter_tag.text.strip() if chapter_tag else None
                else:
                    logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Webnovel: {response.status}')
                    return None
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Webnovel: {e}')
        return None

async def fetch_boosty_chapters():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(URL_BOOSTY) as response:
                if response.status == 200:
                    html = await response.text()
                    soup = BeautifulSoup(html, 'html.parser')
                    chapters = soup.find_all('div', class_='PostSubscriptionBlock_title_WXCN0')
                    filtered_chapters = [
                        chapter.get_text(strip=True)
                        for chapter in chapters
                        if re.match(r'^–ì–ª–∞–≤–∞ \d+: .+$', chapter.get_text(strip=True))
                    ]
                    return filtered_chapters
                else:
                    logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Boosty: {response.status}')
                    return []
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Boosty: {e}')
        return []

async def check_new_chapters():
    global last_chapters_webnovel, last_chapters_boosty, notified_chapters_webnovel, notified_chapters_boosty

    latest_chapter_webnovel = await fetch_webnovel_chapter()
    new_chapters_found = False

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤ Webnovel
    if latest_chapter_webnovel and (not last_chapters_webnovel or latest_chapter_webnovel != last_chapters_webnovel[-1]):
        last_chapters_webnovel.append(latest_chapter_webnovel)
        if len(last_chapters_webnovel) > 2:
            last_chapters_webnovel.pop(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≥–ª–∞–≤–∞ –Ω–æ–≤–∞—è
        if latest_chapter_webnovel not in notified_chapters_webnovel:
            await notify_chats(f"üìñ –í—ã—à–ª–∞ –Ω–æ–≤–∞—è –≥–ª–∞–≤–∞ –Ω–∞ Webnovel: {latest_chapter_webnovel}")
            notified_chapters_webnovel.add(latest_chapter_webnovel)
            new_chapters_found = True

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤ Boosty
    boosty_chapters = await fetch_boosty_chapters()
    if boosty_chapters:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ –≥–ª–∞–≤—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        if boosty_chapters and (not last_chapters_boosty or boosty_chapters[0] != last_chapters_boosty[0]):
            last_chapters_boosty = boosty_chapters[:2]
            last_chapters_boosty.reverse()  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –≥–ª–∞–≤

        for chapter in last_chapters_boosty:
            if chapter not in notified_chapters_boosty:
                await notify_chats(f"üöÄ –í—ã—à–ª–∞ –Ω–æ–≤–∞—è –≥–ª–∞–≤–∞ –Ω–∞ Boosty: {chapter}")
                notified_chapters_boosty.add(chapter)
                new_chapters_found = True

    return new_chapters_found

async def check_updates():
    while True:
        try:
            logging.info("–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≥–ª–∞–≤...")
            new_chapters_found = await check_new_chapters()
            if not new_chapters_found:
                logging.info("–ù–æ–≤—ã—Ö –≥–ª–∞–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        await asyncio.sleep(8)  # –û–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ 8 —Å–µ–∫—É–Ω–¥

async def notify_chats(message_text):
    chat_data = load_chat_data()
    for chat_id in chat_data.get('chats', []):
        chat_id_str = str(chat_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç
        if chat_id_str not in sent_messages:
            sent_messages[chat_id_str] = set()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç
        if message_text not in sent_messages[chat_id_str]:
            await bot.send_message(chat_id, message_text)
            sent_messages[chat_id_str].add(message_text)

async def on_startup():
    chat_data = load_chat_data()
    if chat_data.get('chats'):
        # Initialize `notified_chapters_boosty` from chat data if needed
        pass

    asyncio.create_task(check_updates())

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–æ–≤—ã—Ö –≥–ª–∞–≤–∞—Ö –Ω–∞ Webnovel –∏ Boosty.")

@dp.message(Command("last"))
async def last_chapter(message: types.Message):
    webnovel_chapters = "\n".join(last_chapters_webnovel)
    boosty_chapters = "\n".join(last_chapters_boosty)

    response = (
        f"<b>–ù–æ–≤—ã–µ –≥–ª–∞–≤—ã –Ω–∞ <a href='{URL_WEBNOVEL}'>Webnovel</a>:</b>\n{webnovel_chapters}\n\n"
        f"<b>–ù–æ–≤—ã–µ –≥–ª–∞–≤—ã –Ω–∞ <a href='{URL_BOOSTY}'>Boosty</a>:</b>\n{boosty_chapters}"
    )

    await message.answer(response, parse_mode='HTML')

@dp.message(Command("check"))
async def check_chapters(message: Message):
    new_chapters_found = await check_new_chapters()
    if not new_chapters_found:
        await last_chapter(message)
    else:
        await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–æ–≤—ã–µ –≥–ª–∞–≤—ã, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ—è–≤–∏–ª–∏—Å—å, –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

@dp.message(Command("ban"))
async def ban_command(message: Message):
    user_name = message.from_user.username
    if user_name == 'dupl1citous':
        response_text = "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç –∏ –±—ã–ª–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –ò–ò. ü§ñ"
    elif user_name == 'AtLasFP':
        response_text = "–ù–µ –ø–æ–ª—É—á–∏—Ç—Å—è, –≥–ª–∞–≤—ã —Å–∞–º–∏ —Å–µ–±—è –Ω–µ –ø–µ—Ä–µ–≤–µ–¥—É—Ç. üìö"
    else:
        response_text = f"–ü–æ–Ω—è–ª–∞, –Ω–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –∏ –∑–∞–º–µ–Ω—É –∏–Ω–¥–∏–≤–∏–¥–∞ –Ω–∞ –ò–ò... ü§ñ"

    await message.reply(response_text)

@dp.message()
async def greet_new_member(message: types.Message):
    if message.chat.type == 'group':
        new_members = message.new_chat_members
        for member in new_members:
            webnovel_chapters = "\n".join(last_chapters_webnovel)
            boosty_chapters = "\n".join(last_chapters_boosty)

            welcome_text = (
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.full_name}. –ó–¥–µ—Å—å –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –æ–Ω–≥–æ–∏–Ω–≥ –¢–µ–Ω–µ–≤–æ–≥–æ –†–∞–±–∞. "
                f"–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å —Å–ø–æ–π–ª–µ—Ä—ã –∏–ª–∏ —á–∏—Ç–∞–µ—Ç–µ –≥–ª–∞–≤—ã –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–µ, —Ç–æ –≤–∞–º —Å—é–¥–∞: "
                f"https://t.me/shad0wslave_chat. –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n\n"
                f"<b>–ù–æ–≤—ã–µ –≥–ª–∞–≤—ã –Ω–∞ <a href='{URL_WEBNOVEL}'>Webnovel</a>:</b>\n{webnovel_chapters}\n\n"
                f"<b>–ù–æ–≤—ã–µ –≥–ª–∞–≤—ã –Ω–∞ <a href='{URL_BOOSTY}'>Boosty</a>:</b>\n{boosty_chapters}"
            )

            await message.answer(welcome_text, parse_mode='HTML')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤
def load_chat_data():
    try:
        with open('chat_data.json', 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {"chats": []}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤
def save_chat_data(data):
    with open('chat_data.json', 'w') as f:
        json.dump(data, f)

if __name__ == "__main__":
    import asyncio
    loop = asyncio.get_event_loop()
    loop.create_task(on_startup())
    dp.run_polling(bot, skip_updates=True)
EOF

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
cat << 'EOF' > chat_data.json
{
  "chats": []
}
EOF

# –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
sudo bash -c 'cat <<EOF > /etc/systemd/system/telegram_bot.service
[Unit]
Description=Telegram Bot
After=network.target

[Service]
Type=simple
User=$USER
WorkingDirectory=/home/$USER/my_telegram_bot
ExecStart=/usr/bin/python3 /home/$USER/my_telegram_bot/bot.py
Restart=always

[Install]
WantedBy=multi-user.target
EOF'

# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
sudo systemctl daemon-reload
sudo systemctl start telegram_bot.service
sudo systemctl enable telegram_bot.service

echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∞—à –±–æ—Ç —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∏ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞."
